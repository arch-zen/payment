<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://code.alibabatech.com/schema/dubbo        
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<context:annotation-config />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<aop:aspectj-autoproxy />

	<context:component-scan base-package="com.ymatou.payment" />

	<!-- 使用disconf必须添加以下配置 -->
	<bean id="disconfMgrBean" class="com.baidu.disconf.client.DisconfMgrBean"
		destroy-method="destroy">
		<property name="scanPackage" value="com.ymatou.payment" />
	</bean>
	<bean id="disconfMgrBean2" class="com.baidu.disconf.client.DisconfMgrBeanSecond"
		init-method="init" destroy-method="destroy">
	</bean>

	<bean id="propertiesDisconf"
		class="com.baidu.disconf.client.addons.properties.ReloadablePropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>institutionConfig.xml</value>
			</list>
		</property>
	</bean>

	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="propertiesArray">
			<list>
				<ref bean="propertiesDisconf" />
			</list>
		</property>
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:dubbo.properties</value>
			</list>
		</property>
	</bean>

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="50" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />

		<!-- 线程池对拒绝任务（无线程可用）的处理策略 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务 ；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务 ；会导致被丢弃的任务无法再次被执行 -->
			<bean
				class="com.ymatou.payment.infrastructure.threadexception.LogRejectedPolicy" />
		</property>
	</bean>

	<bean id="performanceMonitorAdvice"
		class="com.ymatou.performancemonitorclient.PerformanceMonitorAdvice">
		<property name="appId" value="payment.iapi.ymatou.com"></property>
		<property name="serverUrl" value="http://172.16.100.13:8089/api/perfmon"></property>
	</bean>

	<aop:config>
		<aop:advisor advice-ref="performanceMonitorAdvice"
			pointcut="execution(* com.ymatou.payment.facade.*Facade.*(..))
						|| execution(* com.ymatou.payment.facade.rest.*Resource.*(..))
						|| execution(* com.ymatou.payment.infrastructure.db.mapper.*Mapper.*(..))
						|| execution(* com.ymatou.payment.infrastructure.db.query.*Query.*(..))
						|| execution(* com.ymatou.payment..*Repository.*(..))
						|| execution(* com.ymatou.payment.integration.service..*(..))
						" />
	</aop:config>


	<import resource="classpath:spring/persistence.xml" />



	<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="payment" />

	<dubbo:registry address="zookeeper://${dubbo.zoo}" />

	<!-- 用dubbo协议在20880端口暴露服务 -->
	<dubbo:protocol name="dubbo" port="30880" serialization="kryo" />

	<dubbo:protocol name="rest" server="servlet" port="8091"
		extension="com.ymatou.payment.infrastructure.serialize.JacksonConfig" />

	<dubbo:service interface="com.ymatou.payment.facade.RefundFacade"
		ref="refundFacade" protocol="dubbo" />
	
	<dubbo:service interface="com.ymatou.payment.facade.rest.PaymentResource"
		ref="paymentResource" protocol="rest" />

	<dubbo:service interface="com.ymatou.payment.facade.rest.RefundResource"
		ref="refundResource" protocol="rest" />
		
	<dubbo:service interface="com.ymatou.payment.facade.rest.RefundNotifyResource"
		ref="refundNotifyResource" protocol="rest" />

	<dubbo:service interface="com.ymatou.payment.facade.rest.CheckPaymentResource"
		ref="checkPaymentResource" protocol="rest" />

	<dubbo:service interface="com.ymatou.payment.facade.rest.SystemResource"
		ref="systemResource" protocol="rest" />
	
	<dubbo:service interface="com.ymatou.payment.facade.rest.PaymentNotifyResource"
		ref="paymentNotifyResource" protocol="rest" />	
		
	<dubbo:service interface="com.ymatou.payment.facade.rest.RefundJobResource"
		ref="refundJobResource" protocol="rest" />	
		
	<dubbo:service interface="com.ymatou.payment.facade.rest.TestPaymentResource"
		ref="testPaymentResource" protocol="rest" />	
</beans>